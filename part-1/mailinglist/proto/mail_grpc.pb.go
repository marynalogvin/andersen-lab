// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: Proto/mail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailingListServiceClient is the client API for MailingListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingListServiceClient interface {
	CreateSubscriber(ctx context.Context, in *CreateSubscriberRequest, opts ...grpc.CallOption) (*SubscriberResponse, error)
	GetSubscriber(ctx context.Context, in *GetSubscriberRequest, opts ...grpc.CallOption) (*SubscriberResponse, error)
	UpdateSubscriber(ctx context.Context, in *UpdateSubscriberRequest, opts ...grpc.CallOption) (*SubscriberResponse, error)
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*SubscriberResponse, error)
}

type mailingListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingListServiceClient(cc grpc.ClientConnInterface) MailingListServiceClient {
	return &mailingListServiceClient{cc}
}

func (c *mailingListServiceClient) CreateSubscriber(ctx context.Context, in *CreateSubscriberRequest, opts ...grpc.CallOption) (*SubscriberResponse, error) {
	out := new(SubscriberResponse)
	err := c.cc.Invoke(ctx, "/proto.MailingListService/CreateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingListServiceClient) GetSubscriber(ctx context.Context, in *GetSubscriberRequest, opts ...grpc.CallOption) (*SubscriberResponse, error) {
	out := new(SubscriberResponse)
	err := c.cc.Invoke(ctx, "/proto.MailingListService/GetSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingListServiceClient) UpdateSubscriber(ctx context.Context, in *UpdateSubscriberRequest, opts ...grpc.CallOption) (*SubscriberResponse, error) {
	out := new(SubscriberResponse)
	err := c.cc.Invoke(ctx, "/proto.MailingListService/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingListServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*SubscriberResponse, error) {
	out := new(SubscriberResponse)
	err := c.cc.Invoke(ctx, "/proto.MailingListService/CancelSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingListServiceServer is the server API for MailingListService service.
// All implementations must embed UnimplementedMailingListServiceServer
// for forward compatibility
type MailingListServiceServer interface {
	CreateSubscriber(context.Context, *CreateSubscriberRequest) (*SubscriberResponse, error)
	GetSubscriber(context.Context, *GetSubscriberRequest) (*SubscriberResponse, error)
	UpdateSubscriber(context.Context, *UpdateSubscriberRequest) (*SubscriberResponse, error)
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*SubscriberResponse, error)
	mustEmbedUnimplementedMailingListServiceServer()
}

// UnimplementedMailingListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailingListServiceServer struct {
}

func (UnimplementedMailingListServiceServer) CreateSubscriber(context.Context, *CreateSubscriberRequest) (*SubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriber not implemented")
}
func (UnimplementedMailingListServiceServer) GetSubscriber(context.Context, *GetSubscriberRequest) (*SubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriber not implemented")
}
func (UnimplementedMailingListServiceServer) UpdateSubscriber(context.Context, *UpdateSubscriberRequest) (*SubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriber not implemented")
}
func (UnimplementedMailingListServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*SubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedMailingListServiceServer) mustEmbedUnimplementedMailingListServiceServer() {}

// UnsafeMailingListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingListServiceServer will
// result in compilation errors.
type UnsafeMailingListServiceServer interface {
	mustEmbedUnimplementedMailingListServiceServer()
}

func RegisterMailingListServiceServer(s grpc.ServiceRegistrar, srv MailingListServiceServer) {
	s.RegisterService(&MailingListService_ServiceDesc, srv)
}

func _MailingListService_CreateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).CreateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MailingListService/CreateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).CreateSubscriber(ctx, req.(*CreateSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingListService_GetSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).GetSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MailingListService/GetSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).GetSubscriber(ctx, req.(*GetSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingListService_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MailingListService/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).UpdateSubscriber(ctx, req.(*UpdateSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingListService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MailingListService/CancelSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingListService_ServiceDesc is the grpc.ServiceDesc for MailingListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MailingListService",
	HandlerType: (*MailingListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscriber",
			Handler:    _MailingListService_CreateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriber",
			Handler:    _MailingListService_GetSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _MailingListService_UpdateSubscriber_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _MailingListService_CancelSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/mail.proto",
}
